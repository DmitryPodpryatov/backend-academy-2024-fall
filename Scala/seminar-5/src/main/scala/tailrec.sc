// Tailrec

/*
Обычный рекурсивный подсчет суммы, проблема в том, что для больших значений будет переполняться стек
*/

def sum(n: Int): Int =
  if (n <= 0) 0
  else n + sum(n - 1)

sum(5)
sum(1_000_000) // overflow

/*
Хвостовая рекурсия - это специальный вид рекурсии, при котором рекурсивный вызов функции является
последней операцией в функции. Это позволяет компилятору оптимизировать код и избежать переполнения
стека, превращая рекурсивный вызов в цикл.

Пример хвостовой рекурсии для подсчета суммы чисел от 1 до N в Scala:
*/

@scala.annotation.tailrec
def sumTailrec(n: Int, acc: Int = 0): Int =
  if (n <= 0) acc
  else sumTailrec(n - 1, acc + n)

sumTailrec(5)
sumTailrec(1_000_000) // ok

/*
В этом примере функция sumTailrec использует хвостовую рекурсию для подсчета суммы чисел от 1 до N.
В каждом рекурсивном вызове, текущее число добавляется к аккумулятору acc. Когда достигается базовый
случай (n <= 0), функция возвращает аккумулятор.

Ключевое слово @tailrec используется для указания компилятору, что функция должна быть хвостовой
рекурсией. Это помогает убедиться, что оптимизация хвостовой рекурсии будет применена.
*/